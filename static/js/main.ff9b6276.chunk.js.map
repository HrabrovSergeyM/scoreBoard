{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","components/Counter.js","components/Player.js","components/AddPlayerForm.js","components/App.js","index.js"],"names":["Stats","props","totalPlayers","players","length","totalPoints","reduce","total","player","score","className","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","now","Date","setState","prevState","handleStopwatch","handleReset","this","intervalID","setInterval","clearInterval","seconds","Math","floor","onClick","Component","Header","title","defaultProps","Counter","index","changeScore","Player","name","id","removePlayer","PureComponent","AddPlayerForm","playerInput","React","createRef","handleSubmit","e","preventDefault","addPlayer","current","value","currentTarget","reset","onSubmit","type","ref","placeholder","App","prevPlayerId","handleScoreChange","delta","updatedPlayers","updatedPlayer","handleAddPlayer","handleRemovePlayer","filter","p","map","key","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff9b6276.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Stats = (props) => {\n  const totalPlayers = props.players.length;\n  const totalPoints = props.players.reduce((total, player) => {\n    return total + player.score;\n  }, 0);\n\n  return (\n    <table className=\"stats\">\n      <tbody>\n        <tr>\n          <td>Players:</td>\n          <td>{totalPlayers}</td>\n        </tr>\n        <tr>\n          <td>Total Points:</td>\n          <td>{totalPoints}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nStats.propTypes = {\n  players: PropTypes.arrayOf(PropTypes.shape({\n    score: PropTypes.number\n  })),\n};\n\nexport default Stats;\n","import React, { Component } from 'react';\n\nclass Stopwatch extends Component {\n\n  state = {\n    isRunning: false,\n    elapsedTime: 0,\n    previousTime: 0\n  };\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 100);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  tick = () => {\n    if (this.state.isRunning) {\n      const now = Date.now();\n      this.setState( prevState => ({\n        previousTime: now,\n        elapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\n      }));\n    }\n  }\n  \n  handleStopwatch = () => {\n    this.setState( prevState => ({\n      isRunning: !prevState.isRunning\n    }));\n    if (!this.state.isRunning) {\n      this.setState({ previousTime: Date.now() });\n    }\n  }\n\n  handleReset = () => {\n    this.setState({ elapsedTime: 0 });\n  }\n\n  render() {\n    const seconds = Math.floor(this.state.elapsedTime / 1000);\n\n    return (\n      <div className=\"stopwatch\">\n        <h2>Stopwatch</h2>\n        <span className=\"stopwatch-time\">{ seconds }</span>\n        <button onClick={this.handleStopwatch}>\n          { this.state.isRunning ? 'Stop' : 'Start' }\n        </button>\n        <button onClick={this.handleReset}>Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default Stopwatch;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Stats from \"./Stats\";\nimport Stopwatch from \"./Stopwatch\";\n\nconst Header = ({ players, title }) => {\n  return (\n    <header>\n      <Stats players={players} />\n      <h1>{title}</h1>\n      <Stopwatch />\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  title: PropTypes.string,\n  players: PropTypes.arrayOf(PropTypes.object),\n};\n\nHeader.defaultProps = {\n  title: \"Scoreboard\",\n};\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Counter = ({ index, score, changeScore }) => {\n  return (\n    <div className=\"counter\">\n      <button\n        className=\"counter-action decrement\"\n        onClick={() => changeScore(index, -1)}\n      >\n        {\" \"}\n        -{\" \"}\n      </button>\n      <span className=\"counter-score\">{score}</span>\n      <button\n        className=\"counter-action increment\"\n        onClick={() => changeScore(index, 1)}\n      >\n        {\" \"}\n        +{\" \"}\n      </button>\n    </div>\n  );\n};\n\nCounter.propTypes = {\n  index: PropTypes.number,\n  score: PropTypes.number,\n  changeScore: PropTypes.func,\n};\n\nexport default Counter;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Counter from \"./Counter\";\n\nclass Player extends PureComponent {\n  static propTypes = {\n    changeScore: PropTypes.func,\n    removeScore: PropTypes.func,\n    name: PropTypes.string,\n    score: PropTypes.number,\n    id: PropTypes.number,\n    index: PropTypes.number,\n  };\n\n  render() {\n    const { name, id, score, index, removePlayer, changeScore } = this.props;\n\n    return (\n      <div className=\"player\">\n        <span className=\"player-name\">\n          <button className=\"remove-player\" onClick={() => removePlayer(id)}>\n            ✖\n          </button>\n          {name}\n        </span>\n\n        <Counter score={score} index={index} changeScore={changeScore} />\n      </div>\n    );\n  }\n}\n\nexport default Player;\n","import React, { Component } from 'react';\n\nclass AddPlayerForm extends Component {\n\n  playerInput = React.createRef();\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.addPlayer(this.playerInput.current.value);\n    e.currentTarget.reset();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input \n          type=\"text\"\n          ref={this.playerInput}\n          placeholder=\"Enter a player's name\"\n        />\n        \n        <input \n          type=\"submit\"\n          value=\"Add Player\"\n        />\n      </form>\n    );\n  }\n}\n\nexport default AddPlayerForm;","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Player from \"./Player\";\nimport AddPlayerForm from \"./AddPlayerForm\";\n\nclass App extends Component {\n  state = {\n    players: [\n      {\n        name: \"Serg\",\n        score: 0,\n        id: 1,\n      },\n      {\n        name: \"Ars\",\n        score: 0,\n        id: 2,\n      },\n      {\n        name: \"Andrew\",\n        score: 0,\n        id: 3,\n      },\n      {\n        name: \"Edem\",\n        score: 0,\n        id: 4,\n      },\n    ],\n  };\n\n  // player id counter\n  prevPlayerId = 4;\n\n  handleScoreChange = (index, delta) => {\n    this.setState((prevState) => {\n      // New 'players' array – a copy of the previous `players` state\n      const updatedPlayers = [...prevState.players];\n      // A copy of the player object we're targeting\n      const updatedPlayer = { ...updatedPlayers[index] };\n\n      // Update the target player's score\n      updatedPlayer.score += delta;\n      // Update the 'players' array with the target player's latest score\n      updatedPlayers[index] = updatedPlayer;\n\n      // Update the `players` state without mutating the original state\n      return {\n        players: updatedPlayers,\n      };\n    });\n  };\n\n  handleAddPlayer = (name) => {\n    this.setState((prevState) => {\n      return {\n        players: [\n          ...prevState.players,\n          {\n            name,\n            score: 0,\n            id: (this.prevPlayerId += 1),\n          },\n        ],\n      };\n    });\n  };\n\n  handleRemovePlayer = (id) => {\n    this.setState((prevState) => {\n      return {\n        players: prevState.players.filter((p) => p.id !== id),\n      };\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"scoreboard\">\n        <Header title=\"Scoreboard\" players={this.state.players} />\n\n        {/* Players list */}\n        {this.state.players.map((player, index) => (\n          <Player\n            name={player.name}\n            score={player.score}\n            id={player.id}\n            key={player.id.toString()}\n            index={index}\n            changeScore={this.handleScoreChange}\n            removePlayer={this.handleRemovePlayer}\n          />\n        ))}\n\n        <AddPlayerForm addPlayer={this.handleAddPlayer} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}